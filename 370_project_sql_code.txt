mysql -u root -p
use fitness_tracking_database;

CREATE TABLE Client (
    Client_ID INT PRIMARY KEY AUTO_INCREMENT,
    Email VARCHAR(255),
    Password VARCHAR(255),
    Name VARCHAR(255),
    Age INT,
    Gender VARCHAR(255),
    Height FLOAT,
    Weight FLOAT,
    Trainer INT,
    Medical INT,
    Workout_id INT,
    FOREIGN KEY (trainer) REFERENCES trainer(trainer_ID),
    FOREIGN KEY (medical) REFERENCES medical_history(medical_hist_id),
    FOREIGN KEY (workout_id) REFERENCES workout_routine(workout_id)
);


CREATE TABLE Trainer(
   Trainer_id INT PRIMARY KEY AUTO_INCREMENT,
    Email VARCHAR(255),
    Password VARCHAR(255),
    Name VARCHAR(255),
    Specialization VARCHAR(255),
    Experience INT        
);


CREATE TABLE Admin (
    Admin_ID INT PRIMARY KEY AUTO_INCREMENT,
    Email VARCHAR(255),
    Password VARCHAR(255),
    Name VARCHAR(255)
);


CREATE TABLE Doctor (
    doctor_id INT PRIMARY KEY AUTO_INCREMENT,
    Email VARCHAR(255),
    Password VARCHAR(255),
    Name VARCHAR(255),
    patient_number INT
);


CREATE TABLE payment (
    client_id INT,
    amount INT,
    status ENUM('paid', 'unpaid') DEFAULT 'unpaid',
    month VARCHAR(255),
    FOREIGN KEY (client_id) REFERENCES client(client_id)
);


CREATE TABLE workout_routine (
    workout_id INT PRIMARY KEY AUTO_INCREMENT,
    trainer_id INT,
    FOREIGN KEY (trainer_id) REFERENCES trainer(trainer_ID)
);

CREATE TABLE exercise (
    workout_id INT,
    Exersice_name VARCHAR(255), 
    Sets INT,
    Reps INT,
    FOREIGN KEY (workout_id) REFERENCES workout_routine(workout_id)
);

CREATE TABLE medical_history (
    medical_hist_id INT PRIMARY KEY AUTO_INCREMENT,
    Bp FLOAT
);


CREATE TABLE friendship (
    client1 INT,
    client2 INT,
    FOREIGN KEY (client1) REFERENCES client(client_id),
    FOREIGN KEY (client2) REFERENCES client(client_id)
);


CREATE TABLE friend_request (
    sender_id INT,
    receiver_id INT,
    status ENUM('pending', 'accepted', 'rejected') DEFAULT 'pending',
    FOREIGN KEY (sender_id) REFERENCES client(client_id),
    FOREIGN KEY (receiver_id) REFERENCES client(client_id)
);


CREATE TABLE client_rates_trainer (
    client_id INT,
    trainer_id INT,
    rating FLOAT,
    FOREIGN KEY (client_id) REFERENCES client(client_id),
    FOREIGN KEY (trainer_id) REFERENCES trainer(trainer_id )
);


CREATE TABLE diet (
    diet_id INT PRIMARY KEY AUTO_INCREMENT,
    client_id INT,
    trainer_id INT,
    FOREIGN KEY (client_id) REFERENCES client(client_id),
    FOREIGN KEY (trainer_id) REFERENCES trainer(trainer_id)
);


CREATE TABLE breakfast_items(
    diet_id INT,
    name VARCHAR(255),
    amount FLOAT,
    Nut_info VARCHAR(255),
    calories FLOAT,
    FOREIGN KEY (diet_id) REFERENCES diet(diet_id)
);


CREATE TABLE lunch_items(
    diet_id INT,
    name VARCHAR(255),
    amount FLOAT,
    Nut_info VARCHAR(255),
    calories FLOAT,
    FOREIGN KEY (diet_id) REFERENCES diet(diet_id)
);


CREATE TABLE dinner_items(
    diet_id INT,
    name VARCHAR(255),
    amount FLOAT,
    Nut_info VARCHAR(255),
    calories FLOAT,
    FOREIGN KEY (diet_id) REFERENCES diet(diet_id)
);



CREATE TABLE challenges(
    Challenge_id INT PRIMARY KEY AUTO_INCREMENT,
    Task_name VARCHAR(255),
    Deadline DATE,
    Point INT,
    Type VARCHAR(255)
);

CREATE TABLE achievement(
    Challenge_id INT,
    client_id INT,
    Task_name VARCHAR(255),
    Point INT,
    FOREIGN KEY (client_id) REFERENCES client(client_id)
);


CREATE TABLE client_complains_to_admin(
    admin_id INT,
    client_id INT,
    Comment VARCHAR(255),
    FOREIGN KEY (admin_id) REFERENCES admin(admin_id),
    FOREIGN KEY (client_id) REFERENCES client(client_id)
);


CREATE TABLE leaderboard(
    Challenge_id INT,
    client_id INT,
    Position INT,
    FOREIGN KEY (challenge_id) REFERENCES challenges(challenge_id),
    FOREIGN KEY (client_id) REFERENCES client(client_id)

);


CREATE TABLE admin_changes_trainer(
    Admin_id INT,
    Trainer_id INT,
    FOREIGN KEY (admin_id) REFERENCES admin(admin_id),
    FOREIGN KEY (trainer_id) REFERENCES doctor(doctor_id)


);

CREATE TABLE admin_can_change_doctor(
    Admin_id INT,
    Doctor_id INT,
    FOREIGN KEY (admin_id) REFERENCES admin(admin_id),
    FOREIGN KEY (doctor_id) REFERENCES doctor(doctor_id)


);


CREATE TABLE doctor_creates_med_history(
    doctor_id INT,
    Medical_hist_id INT,
    FOREIGN KEY (doctor_id) REFERENCES doctor(doctor_id),
    FOREIGN KEY (Medical_hist_id ) REFERENCES medical_history(Medical_hist_id )


);



CREATE TABLE goal(
    Goal_id INT PRIMARY KEY AUTO_INCREMENT,
    Target VARCHAR(255),
    Goal_type VARCHAR(255),
    Start DATE,
    End DATE,
    Achieved BOOLEAN,
    Client_id INT,
    FOREIGN KEY (client_id) REFERENCES client(client_id)
);


CREATE TABLE activity(
    goal_id INT,
    Activity_id INT PRIMARY KEY AUTO_INCREMENT,
    Activity_type VARCHAR(255),
    Client_id INT,
    FOREIGN KEY (goal_id) REFERENCES goal(goal_id),
    FOREIGN KEY (client_id) REFERENCES client(client_id)
);



CREATE tracking_tech(
    Tech_id INT PRIMARY KEY AUTO_INCREMENT,
    Activity_id INT,
    Tech_name VARCHAR(255),
    FOREIGN KEY (activity_id) REFERENCES activity(activity_id)
);

CREATE TABLE tracking_tech (
    Tech_id INT AUTO_INCREMENT PRIMARY KEY,
    Activity_id INT,
    Tech_name VARCHAR(255),
    FOREIGN KEY (Activity_id) REFERENCES activity(Activity_id)
);



CREATE TABLE matric(
    tech_id INT,
    speed INT,
    duration TIME,
    distance FLOAT,
    FOREIGN KEY (tech_id) REFERENCES tracking_tech(tech_id)
);

CREATE TABLE trainer_submit_issue_to_doctor(
    Trainer_id INT,
    Doctor_id INT,
    Client_id INT, 
    Issue VARCHAR(255),
    FOREIGN KEY (trainer_id) REFERENCES trainer(trainer_id),
    FOREIGN KEY (doctor_id) REFERENCES doctor(doctor_id) 

);


INSERT INTO Client (Email, Password, Name, Age, Gender, Height, Weight)
VALUES
    ('email1@example.com', 'password1', 'John Doe', 30, 'Male', 175.5, 70.2),
    ('email2@example.com', 'password2', 'Jane Smith', 25, 'Female', 162.3, 58.7),
    ('email3@example.com', 'password3', 'Michael Johnson', 28, 'Male', 180.0, 80.5),
    ('email4@example.com', 'password4', 'Emily Williams', 22, 'Female', 158.9, 52.1),
    ('email5@example.com', 'password5', 'Alex Brown', 35, 'Male', 170.2, 75.8),
    ('email6@example.com', 'password6', 'Olivia Davis', 29, 'Female', 167.4, 61.3),
    ('email7@example.com', 'password7', 'Daniel Taylor', 27, 'Male', 185.7, 88.2),
    ('email8@example.com', 'password8', 'Sophia Clark', 24, 'Female', 160.1, 55.9),
    ('email9@example.com', 'password9', 'Ethan Lee', 31, 'Male', 178.8, 72.6),
    ('email10@example.com', 'password10', 'Ava Garcia', 26, 'Female', 163.5, 59.4);

INSERT INTO challenges (Task_name, Deadline, Point, Type)
VALUES
    ('Challenge 1', '2023-07-15', 100, 'Physical'),
    ('Challenge 2', '2023-09-20', 150, 'Mental'),
    ('Challenge 3', '2023-08-30', 120, 'Physical'),
    ('Challenge 4', '2023-10-05', 180, 'Nutrition'),
    ('Challenge 5', '2023-09-10', 130, 'Physical');

INSERT INTO payment (client_id, amount, status, month)
VALUES
    (1, 1000, 'paid', 'June'),
    (1, 1000, 'paid', 'August'),
    (2, 1500, 'paid', 'June'),
    (3, 1200, 'unpaid', 'July'),
    (4, 1800, 'paid', 'July'),
    (5, 1300, 'unpaid', 'August'),
    (5, 1300, 'unpaid', 'September')
;
